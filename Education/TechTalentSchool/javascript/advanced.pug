doctype html
html(lang='en')
    head
        meta(charset='utf-8')
        title TechTalentSchool | Advanced JavaScript 
        meta(name='author' content='Kostas Minaidis')
        meta(name='apple-mobile-web-app-capable' content='yes')
        meta(name='apple-mobile-web-app-status-bar-style' content='black-translucent')
        meta(name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
        // Bulma.io | https://cdnjs.com/libraries/bulma
        link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css')
        link(rel='stylesheet' href='../libs/reveal.js/css/reveal.css')
        link#theme(rel='stylesheet' href='../libs/reveal.js/css/theme/black-tts.css')
        link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/hack-font@3/build/web/hack.css')
        // Roboto | Google Web Fonts
        link(href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900' rel='stylesheet')
        // Theme used for syntax highlighting of code
        link(rel='stylesheet' href='../libs/reveal.js/lib/css/monokai-sublime-sha.css')
        link(rel='stylesheet' href='../css/reveal-overrides.css')
        link(rel='stylesheet' href='../css/reveal-tts.css')
        style.
            a.full-anchor {
                position: fixed;
                top     : -50%;
                left    : -50%;
                width   : 200vw;
                height  : 200vh;
                text-indent: -50000px;
            }
            .reveal .slide-background {
                background-size: contain;
            }
            .svg_contain svg {
                position:absolute;
                top     :0;
                left    :0;
                width   :100%;
                height  :auto;"
            }
        style.
            #array_recap pre.small { margin-bottom: -8px; }

        style#tts.

            .reveal.tts-intro {
                background-image: url('images/tts-titles-js-advanced.jpg');
            }
            .reveal.tts-outro {
                background-image: url('images/tts-titles-joinus.jpg');
            }
            .reveal.tts-intro,
            .reveal.tts-outro {
                background-repeat: no-repeat;
                background-size: contain;
                background-position: center;
            }
            .reveal.tts-intro .progress,
            .reveal.tts-outro .progress {
                display: none !important;
            }      

    body

        // Alt+Click | Zoom
        // S | Speaker View
        // B or . | Pause View

        .reveal
            .slides

                // TTS | INTRO
                section#tts-intro.tts-title(data-state='tts-intro' data-transition="fade-out")

                // INTRO
                section(data-transition="fade-out")
                    h2 Advanced JavaScript
                    h3.colorful Front-end Bootcamp
                    p
                        small
                            | Created by 
                            a(href='https://github.com/kostasx') Kostas Minaidis
                            |  | Dec 2018
 
                // AGENTA
                section
                    h3 Agenta
                    ul(style='font-size:0.8em;')

                        li Handling Asynchronous code with Async/Await
                        li Understanding `this` &amp; Explicit Binding: call, apply, bind 
                        li ES6: Default Function Parameters
                        li ES6: Spread Operator &amp; Destructuring Assignments
                        li ES6: Modules
                        li Types &amp; Equality
                        li JS Patterns: The IIFE 
                        li Regular Expressions

                // ASYNC / AWAIT
                section

                    section
                        h4 Handling Asynchronous Operations using
                        h1.colorful Async / Await

                    section
                        .columns
                            .column.is-8.is-offset-2
                                h6 Asynchronous Functions
                                pre.fragment
                                    code.hljs.javascript(data-trim contenteditable).

                                        async function connect(){ ... }


                                p.fragment.small An <strong class="colorful">async</strong>(hronous) function operates asynchronously, using an implicit <strong class="colorful">Promise</strong> to return its result. 

                                p.fragment.small The syntax and structure is much more like using standard synchronous functions.

                                p.small.fragment 
                                    strong.colorful Open your console and compare the result of the following commands:

                                pre.fragment
                                    code.hljs.javascript(data-trim contenteditable).
                                              function normal(){ return 42; }
                                        async function normal(){ return 42; }

                    section
                        h6 The <strong class="colorful">await</strong> keyword
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                async function connect(){
                                    const result = await promiseCommand();
                                }
                        .columns
                            .column.is-8.is-offset-2

                                p.small.fragment An async function can contain an <strong class="colorful">await</strong> expression that pauses the execution of the async function and waits for the passed Promise's resolution, and then resumes the async function's execution and returns the resolved value.
                                p.small.fragment Remember, the await keyword is only valid inside async functions.

                                a.fragment.small(target="_blank" href="https://codepen.io/kostasx/pen/ePNVbx") CodePen

                    section
                        h6 Practice makes perfect...

                        a(href="https://codepen.io/kostasx/pen/maOVyo?editors=0011" target="_blank") Warming up... 

                        .linebreak

                        a(href="https://codepen.io/kostasx/pen/QzGbrB?editors=0011" target="_blank") CodePen Exercise #1

                        .linebreak

                        a(href="https://codepen.io/kostasx/pen/oJYjYw?editors=0001" target="_blank") CodePen Exercise #2

                    section
                        h3 Example:
                        a(target="_blank" href="https://codepen.io/kostasx/pen/NONQgL?editors=0011") Hands-on: Bitcoin Wallet
                        br
                        a(class="bitly_link" target="_blank" href="https://bit.ly/2No4jlx")
                            span https://bit.ly/<strong>2No4jlx</strong>

                // this, call, apply, bind
                section
                    // INTRODUCTION
                    section
                        h3 Understanding <strong class="colorful">this</strong>
                        .columns
                            .column.is-10.is-offset-1

                                p.small When a function is invoked an execution context is created which is like a record containing information about where the function was called from (call-stack), how the function was invoked, what parameters were passed, etc. One of the properties of this record is the <strong class="colorful">this</strong> reference which will be used for the duration of that function's execution.

                                p.small.fragment What <strong class="colorful">this</strong> references is determined entirely<br/>by the call-site where the function is called.
                    // GLOBAL CONTEXT
                    section
                        h3 <strong class="colorful">this</strong> in Global Context
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                console.log( this );

                                function run(){
                                    console.log( this );
                                }
                        .linebreak
                        p.small.fragment Both functions run within the global <strong class="colorful">(window)</strong> object.
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                window.console.log( this );
                                window.run();
                        p.small.fragment In both cases, <strong class="colorful">this</strong> references the window object (the functions' call-site).
                    // FUNCTION CONSTRUCTORS + CLASSES
                    section
                        h3 <strong class="colorful">this</strong> in Function Constructors
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                function Person( name ){
                                    console.log( this );
                                    this.name = name;
                                    this.show = function(){
                                        console.log( this.name );
                                    }
                                }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = new Person( "Kostas" );
                                person.show();
                        p.small.fragment <strong class="colorful">this</strong> is a reference to the Object created<br/>by the Function constructor using the <strong class="colorful">new</strong> keyword.
                        p.small.fragment But...
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                Person( "Mary" );
                    // ES6 CLASSES
                    section
                        h3 <strong class="colorful">this</strong> in ES6 Classes
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                class Person {
                                    constructor( name ){
                                        console.log( this );
                                        this.name = name;
                                    }
                                    show(){
                                        console.log( this.name );
                                    }
                                }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                let person = new Person( "Kostas" );
                                person.show();
                        p.small.fragment Since ES6 Classes are based on Function Constructors<br/>and Objects, they behave in much the same way.
                    // OBJECT METHODS
                    section
                        h3 <strong class="colorful">this</strong> in Object Methods
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = {
                                    name: "Kostas",
                                    show: function(){
                                        console.log( this, this.name );
                                    }
                                }
                        p.fragment.small When a function is called as a method of an object,<br/>its <strong class="colorful">this</strong> is set to the object the method is called on.
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                person.show();
                                // person { }, "Kostas"
                    // OBJECT METHODS #2
                    section
                        h3 <strong class="colorful">this</strong> in Object Methods #2
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = {
                                    name: "Kostas",
                                    show: function(){
                                        console.log( this, this.name );
                                    }
                                }
                                let other = {
                                    name: "Mary"
                                }
                                other.show = person.show;
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                other.show();
                                // other { }, "Mary"
                        p.fragment.small <strong class="colorful">REMEMBER</strong>: <strong class="colorful">this</strong> is set to the object the method is <strong class="colorful">called on</strong>.
                    // DOM Event Handlers
                    section
                        h3 <strong class="colorful">this</strong> in DOM Event Handlers
                        button#clickme(style="padding:10px 20px; font-size: 1.5rem") Click Me!
                        .linebreak
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let $button = document.querySelector("#clickme");

                                $button.addEventListener( "click", function(){

                                    console.log( this );

                                });
                        p.small.fragment When a function is used as an event handler,<br/>its <strong class="colorful">this</strong> is set to the element the event fired from.
                    // bind, call, apply
                    section
                        h3 Explicit Binding:<br/><strong class="colorful"> bind(), apply(), call()</strong>
                    // bind
                    section
                        h3 <strong class="colorful"> bind()</strong>
                        p.fragment Bind <strong class="colorful">this</strong> to <strong class="colorful">any</strong> Object explicitly.
                        button.fragment#somebutton(style="padding:10px 20px; font-size: 1.5rem") Some Button!
                        .linebreak
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = { name: "Kostas" }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let $button = document.querySelector("#somebutton");
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                function handleClick(){ console.log( this ); }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                $button.addEventListener( "click", handleClick.bind( person ) );
                    // bind #2
                    section
                        h3 <strong class="colorful"> bind()</strong> #2
                        .linebreak
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = { name: "Kostas" }

                                function show(){
                                    console.log( this.name );
                                }

                                show();

                                let personShow = show.bind( person );

                                personShow();
                    // call, apply
                    section
                        h3 <strong class="colorful"> call(), apply()</strong>
                        .linebreak
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = { 
                                    name: "Kostas",
                                    show: function( msg, end ){
                                        console.log( msg + this.name + end );
                                    } 
                                }
                                person.show( "Hello ", "!" );    // Hello Kostas!

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let other = { name: "Mary" }

                                person.show.call( other, "Hi ", "!" );
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                person.show.apply( other, [ "Hi ", "!" ] );
                    // ARROW FUNCTIONS                            
                    section
                        h3 <strong class="colorful">this</strong> in Arrow Functions
                        p.small.fragment Arrow functions don't provide their own this binding<br/>It retains the this value of the enclosing lexical context.
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let obj = {
                                    name: "Kostas",
                                    show: function(){ 
                                        setTimeout(function(){
                                         console.log( this.name );
                                        }, 2000)
                                    }
                                } 
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                obj.show();
                                /// undefined
                    // ARROW FUNCTIONS #2
                    section
                        p.small Remember: setTimeout is called from window and thus<br/>its inner function binds <strong class="colorful">this</strong> to its context (that of the calling site).
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let obj = {
                                    name: "Kostas",
                                    show: function(){ 
                                        window.setTimeout(function(){
                                         console.log( this.name );
                                        }, 2000)
                                    }
                                } 
                        p.small.fragment How can we change this?
                    // ARROW FUNCTIONS #3
                    section
                        p.small #1 Using bind()
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let obj = {
                                    name: "Kostas",
                                    show: function(){ 
                                        window.setTimeout(function(){
                                         console.log( this.name );
                                        }.bind( this ), 2000)
                                    }
                                } 
                    // ARROW FUNCTIONS #4
                    section
                        p.small #2 Using an Arrow Function
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let obj = {
                                    name: "Kostas",
                                    show: function(){ 
                                        window.setTimeout(()=>{
                                         console.log( this.name );
                                        }, 2000)
                                    }
                                } 

                // ES6: Default Function Parameters
                section
                    section
                        h3 Default Parameters in ES5?

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                // ES6: Spread Operator & Destructuring Assignments
                section
                    section
                        h3 Destructuring
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                function doStuff( one, two, { a, b, c } ) {
                                    console.log(a, b, c, d);
                                }

                                doStuff( 'example1', 'example2', {
                                    a: 'opt1',
                                    b: 'opt2',
                                    c: 'opt3'
                                });

                // ES6: Modules
                section

                // TYPES & EQUALITY
                section

                // JS PATTERNS: IIFE
                section

                // REGULAR EXPRESSIONS 
                section

                // RESOURCES
                section
                    h3 Resources:
                    ul
                        li
                            a(href="https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes") You Don't Know JS: this &amp; Object Prototypes
                        li
                            a(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this") Read about this at MDN
                        li
                            a(target="_blank" href="https://codepen.io/kostasx/pen/NONQgL?editors=0011") Hands-on: Bitcoin Wallet
                            br
                            a(class="bitly_link" target="_blank" href="https://bit.ly/2No4jlx")
                                span https://bit.ly/<strong>2No4jlx</strong>

                // TTS | OUTRO 
                section#tts-outro.tts-title(data-state='outro' data-transition="fade-out")

        //- SCRIPTS
        script(src='../libs/reveal.js/lib/js/head.min.js')
        script(src='../libs/reveal.js/js/reveal.js')
        script.
            /* SHA */
            Reveal.configure({
                keyboard: {
                    // Key: 'e'
                    69: function(){
                        /*
                        IF NOT EXIST
                            <PRE>.insertAdjacentHTML('afterend', code);
                        EVALUATE 
                            eval( <PRE>.textContent )
                        */
                    }
                    }
            });

            // More info https://github.com/hakimel/reveal.js#configuration
            Reveal.initialize({

                history: true,
                // More info https://github.com/hakimel/reveal.js#dependencies
                dependencies: [
                    { src: '../libs/reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                    { src: '../libs/reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: '../libs/reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: '../libs/reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                    { src: '../libs/reveal.js/plugin/search/search.js', async: true },
                    { src: '../libs/reveal.js/plugin/zoom-js/zoom.js', async: true },
                    { src: '../libs/reveal.js/plugin/notes/notes.js', async: true }
                ]
            });

            //- Reveal.addEventListener('data-state-value-here', function (){});

            Reveal.addEventListener( 'ready', function( e ) {

                let slideState = e.currentSlide.getAttribute('data-state');
                switch ( slideState ) {
                    case 'tts-intro':
                        console.log('tts-intro');
                        document.querySelector(".reveal").classList.add("tts-intro")
                        break;
                    case 'intro':
                        console.log('intro');
                        document.querySelector(".reveal").classList.remove("tts-intro")
                        break;
                    case 'outro':
                        console.log('outro');
                        document.querySelector(".reveal").classList.add("tts-outro")
                        break;
                    default:
                        console.log("default");
                        document.querySelector(".reveal").classList.remove("tts-outro")
                        document.querySelector(".reveal").classList.remove("tts-intro")

                }    

            });

            /* TTS */

            Reveal.addEventListener( 'slidechanged', function( e ) {

                let slideState = e.currentSlide.getAttribute('data-state');
                switch ( slideState ) {
                    case 'tts-intro':
                        console.log('tts-intro');
                        document.querySelector(".reveal").classList.add("tts-intro")
                        break;
                    case 'intro':
                        console.log('intro');
                        document.querySelector(".reveal").classList.remove("tts-intro")
                        break;
                    case 'outro':
                        console.log('outro');
                        document.querySelector(".reveal").classList.add("tts-outro")
                        break;
                    default:
                        console.log("default");
                        document.querySelector(".reveal").classList.remove("tts-outro")
                        document.querySelector(".reveal").classList.remove("tts-intro")

                }    
                // event.indexh
                
            });