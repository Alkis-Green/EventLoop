doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        meta(name='viewport' content='width=device-width, initial-scale=1.0')
        meta(http-equiv='X-UA-Compatible' content='ie=edge')
        meta(name='author' content='Kostas Minaidis')
        meta(name='apple-mobile-web-app-capable' content='yes')
        meta(name='apple-mobile-web-app-status-bar-style' content='black-translucent')
        meta(name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')

        // Bulma.io | https://cdnjs.com/libraries/bulma
        link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css")
        link(rel='stylesheet' href='../libs/reveal.js/css/reveal.css')
        link#theme(rel='stylesheet' href='../libs/reveal.js/css/theme/black-tts.css')
        link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/hack-font@3/build/web/hack.css')
        // Roboto | Google Web Fonts
        link(href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900' rel='stylesheet')
        // Theme used for syntax highlighting of code
        link(rel='stylesheet' href='../libs/reveal.js/lib/css/monokai-sublime-sha.css')
        link(rel='stylesheet' href='../css/reveal-overrides.css')
        link(rel='stylesheet' href='../css/reveal-tts.css')

        title TechTalentSchool | JavaScript Fundamentals

        style#tts.
            .reveal.tts-intro {
                background-image: url('images/tts-titles-js-fundamentals.jpg');
            }
            .reveal.tts-outro {
                background-image: url('images/tts-titles-joinus.jpg');
            }

        style.
            .reveal.tts-intro,
            .reveal.tts-outro {
                background-size: contain;
                background-repeat: no-repeat;
                background-position: center center;
            }

        style.
            a.dark {
                color: black;
            }
            a.full-anchor {
                position   : fixed;
                top        : -50%;
                left       : -50%;
                width      : 200vw;
                height     : 200vh;
                text-indent: -50000px;
            }
            .reveal .slide-background {
                background-size: contain;
            }
            .svg_contain svg {
                position: absolute;
                top     : 0;
                left    : 0;
                width   : 100%;
                height: auto;
            }
            .reveal a:hover img.no_hover_effect {
                background: transparent;
                border-color: none;
                box-shadow: none;
            }
            .linebreak {
                display: block;
                height: 10px;
            }

    body

        // Alt+Click | Zoom
        // S | Speaker View
        // B or . | Pause View

        .reveal
            .slides

                // TTS | INTRO
                section#tts-intro.tts-title(data-state='tts-intro' data-transition="fade-out")

                //- INTRO
                    section
                    h2 JavaScript Fundamentals
                    h3.colorful Front-end Bootcamp
                    p
                        small
                        | Created by 
                        a(href='https://github.com/kostasx') Kostas Minaidis
                        |  | Sep 2018
                    p
                        img.tts_logo(style='width:140px; height:94px;' src='../img/tts-logo.png' alt='')

                section(data-state='intro')
                    include introduction/introduction.svg

                // WEB TRIO
                section.svg_contain
                    include introduction/web-trio.svg

                // HTML
                section
                    include introduction/html.svg

                // CSS
                section
                    include introduction/css.svg

                // JS
                section
                    include introduction/js.svg

                // HTML + CSS + JS
                section
                    include introduction/html-css.js.svg

                // CSS INCLUDES
                section
                    section.svg_contain
                        include introduction/css-includes.svg
                    // CSS INCLUDES | External
                    section.svg_contain
                        include introduction/css-includes-external.svg

                    // CSS INCLUDES | Internal
                    section.svg_contain
                        include introduction/css-includes-internal.svg

                    // CSS INCLUDES | Inline
                    section.svg_contain
                        include introduction/css-includes-inline.svg

                // JS INCLUDES
                section
                    section.svg_contain
                        include introduction/js-includes.svg

                    // JS INCLUDES | External
                    section.svg_contain
                        include introduction/js-includes-external.svg

                    // JS INCLUDES | Internal
                    section.svg_contain
                        include introduction/js-includes-internal.svg

                    // JS INCLUDES | Inline
                    section.svg_contain
                        include introduction/js-includes-inline.svg

                    // JS Proper Placement of <script>
                    section.svg_contain
                        include introduction/js-includes-best-practices.svg

                // JS INTERPRETER #1
                section.svg_contain(data-transition="fade-out")
                        include introduction/js-interpreter.svg

                // JS INTERPRETER #2
                section.svg_contain(data-transition="fade-out")
                        include introduction/js-interpreter-002.svg

                // JS INTERPRETER #3
                section.svg_contain(data-transition="fade-out")
                        include introduction/js-interpreter-003.svg

                // JS INTERPRETER #4 (I/O)
                section.svg_contain(data-transition="fade-out")
                        include introduction/js-interpreter-004.svg

                // JS INTERPRETER #5 (INPUT)
                section.svg_contain(data-transition="fade-out")
                        include introduction/js-interpreter-005.svg

                // JS INTERPRETER #6 (DATA MANIPULATION)
                section.svg_contain(data-transition="fade-out")
                        include introduction/js-interpreter-006.svg

                // JS INTERPRETER #7 (DATA MANIPULATION II)
                section.svg_contain(data-transition="fade-out")
                        include introduction/js-interpreter-007.svg

                // JS INTERPRETER #8 
                section.svg_contain(data-transition="fade-out")
                        include introduction/js-interpreter-008.svg

                // JS STATEMENTS 
                section.svg_contain
                        include introduction/js-statements.svg

                // JS STATEMENTS (Our first statement)
                section.svg_contain
                        include introduction/js-statements-01.svg

                // JS STATEMENTS (Our first statement - II)
                section.svg_contain
                        include introduction/js-statements-02.svg

                // JS STATEMENTS (Our first statement - III)
                section.svg_contain
                        include introduction/js-statements-03.svg

                // PRIMITIVE DATA TYPES
                section
                    section
                        h3 Primitive Data Types
                        h5.colorful A real life comparison...
                    section.svg_contain(data-background='#ffffff' data-transition='fade')
                        img.plain(src='./introduction/DataTypeTalk-001.svg' alt='')
                    section.svg_contain(data-background='#ffffff' data-transition='fade')
                        img.plain(src='./introduction/DataTypeTalk-002.svg' alt='')
                    section.svg_contain(data-background='#ffffff' data-transition='fade')
                        img.plain(src='./introduction/DataTypeTalk-003.svg' alt='')
                    section.svg_contain(data-background='#ffffff' data-transition='fade')
                        img.plain(src='./introduction/DataTypeTalk-004.svg' alt='')
                    section.svg_contain(data-background='#ffffff' data-transition='fade')
                        img.plain(src='./introduction/DataTypeTalk-005.svg' alt='')

                // ARITHMETIC OPERATORS 001
                section.svg_contain
                    include introduction/arithmetic-operators-001.svg

                // ARITHMETIC OPERATORS 002
                section.svg_contain
                    include introduction/arithmetic-operators-002.svg

                // ARITHMETIC OPERATORS 003 | OPERATOR PRECEDENCE
                section
                    section.svg_contain
                        include introduction/arithmetic-operators-003.svg
                    section
                        h3 More on <strong class="colorful">Operator Precedence</strong>
                        .columns
                            .column.is-6.is-offset-3
                                a(href="https://www.w3schools.com/js/js_arithmetic.asp" target="_blank") W3Schools.com 
                                p.small ( scroll until you find the <strong>JavaScript Operator Precedence Values</strong> section. )
                                a(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank") MDN JS

                // STRINGS
                section.svg_contain
                    include introduction/strings.svg

                // COMMENTS
                section
                    section
                        h2.colorful Comments
                    section
                        p What are <strong class="colorful">Comments</strong>?
                        small.fragment Parts of the program that don't get executed
                        p
                            small.fragment Single line comments:
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                // This is a single line comment

                        p
                            small.fragment Multi-line comments:
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                /* Comments that
                                span multiple lines
                                can be placed like this.
                                */

                // PRACTICE TIME: https://codepen.io/kostasx/pen/opVQQg
                section(data-transition="slide" data-background="#F7BE2C" data-background-transition="zoom")
                    h2 It's time to test our skills!
                    .columns
                        .column.is-8.is-offset-2
                            a.dark(target="_blank" href="https://codepen.io/kostasx/pen/opVQQg?editors=0010")
                                p https://bit.ly/2U97u52
                                img.no_hover_effect(src='./introduction/codepen.png' width="160px")
                            .linebreak
                            small <strong>*</strong>In JavaScript there are 2 basic functions<br>to output values to the browser:
                    .columns
                        .column.is-6.is-offset-3
                            pre
                                code alert( VALUE );
                            .linebreak
                            pre
                                code console.log( VALUE );

                // TYPE COERCION
                section.svg_contain
                    include introduction/type-coercion.svg

                // VARIABLES
                section.svg_contain
                    section
                        include introduction/variables-001.svg
                    section
                        include introduction/variables-002.svg
                    section
                        h2 Let's see a visualization...
                        a(target="_blank" href="http://www.pythontutor.com/javascript.html#code=let%20someName%20%3D%20%22Kostas%22%3B%0Alet%20someDate%20%3D%202018%3B%0AsomeDate%20%3D%202019%3B%0Aconst%20dateOfBirth%20%3D%201995%3B%0A%0A//%20Access%20%26%20print%20the%20Values%3A%0Aconsole.log%28%20someDate%20%29%3B%0Aconsole.log%28%20dateOfBirth%20%29%3B&curInstr=6&mode=display&origin=opt-frontend.js&py=js&rawInputLstJSON=%5B%5D") 
                            h2 https://bit.ly/2AOczXA 

                // PRACTICE TIME: https://codepen.io/kostasx/pen/QaoRZN
                section(data-transition="slide" data-background="#F7BE2C" data-background-transition="zoom")
                    h2 It's time to test our skills!
                    .columns
                        .column.is-8.is-offset-2
                            a.dark(target="_blank" href="https://codepen.io/kostasx/pen/QaoRZN?editors=0010")
                                p https://bit.ly/2BPf11W
                                img.no_hover_effect(src='./introduction/codepen.png' width="160px")
                            .linebreak

                // BOOLEANS
                section.svg_contain
                    include introduction/booleans-001.svg

                // ARRAYS 01
                section.svg_contain
                    section
                        include introduction/arrays-001.svg
                    // ACCESING VALUES
                    section
                        include introduction/arrays-002.svg
                    // ADDING AND REMOVING VALUES
                    section
                        include introduction/arrays-003.svg
                    // VISUALIZATION
                    section
                        h2 Let's some visualizations...
                        a(target="blank" href="http://www.pythontutor.com/javascript.html#code=let%20listOfNames%20%3D%20%5B%20'Abdul',%20'Sofia',%20'Chris'%20%5D%3B%0A%0Aconsole.log%28%20listOfNames%20%29%3B%0A%0AlistOfNames%5B2%5D%20%3D%20'Mary'%3B%0A%0Aconsole.log%28%20listOfNames%5B2%5D%20%29%3B%0A%0Aconsole.log%28%20listOfNames%20%29%3B%0A&curInstr=5&mode=display&origin=opt-frontend.js&py=js&rawInputLstJSON=%5B%5D")
                            h2 https://bit.ly/2Ue8btL
                        .linebreak
                        a(href="http://www.pythontutor.com/javascript.html#code=let%20numberList%20%3D%20%5B%201,%202,%203%20%5D%3B%0A%0AnumberList.push%28%204%20%29%3B%0A%0AnumberList.pop%28%204%20%29%3B%0A%0AnumberList.unshift%280%29%3B%0A%0AnumberList.shift%28%29%3B&curInstr=5&mode=display&origin=opt-frontend.js&py=js&rawInputLstJSON=%5B%5D" target="_blank")
                            h2 https://bit.ly/2KQCumh

                // PRACTICE TIME: https://codepen.io/kostasx/pen/ppBGGb
                section(data-transition="slide" data-background="#F7BE2C" data-background-transition="zoom")
                    h2 It's time to test our skills!
                    .columns
                        .column.is-8.is-offset-2
                            a.dark(target="_blank" href="https://codepen.io/kostasx/pen/ppBGGb?editors=0010")
                                p https://bit.ly/2Pjj5e7
                                img.no_hover_effect(src='./introduction/codepen.png' width="160px")
                            .linebreak

                // NULL + UNDEFINED
                section.svg_contain
                    include introduction/null-undefined.svg

                // COMPARISON OPERATORS
                section.svg_contain
                    include introduction/comparison-operators-001.svg

                // COMPARISON OPERATORS
                section.svg_contain
                    include introduction/comparison-operators-002.svg

                // LOGICAL OPERATORS
                section.svg_contain
                    include introduction/logical-operators-001.svg
                
                // CONDITIONAL STATEMENTS 
                section(data-background="#ffffff")
                    h3 Conditionals
                    h6 { Conditional Statements }
                    <p style="font-size:14px; opacity:0.5;">Image by: <a style="color: black;" href="https://www.guru99.com/how-to-use-conditional-statements-in-javascript.html">Guru99</a></p>
                    img(src="images/conditionals.png" alt="")

                // Conditionals | If ... Else
                section
                    section
                        <h3 class="colorful">if ... else</h3>
                    section
                        p if { ... }
                        pre
                            code.hljs(data-trim contenteditable).
                                let trafficLight = 'red';

                                if ( trafficLight === 'red' ){

                                    console.log( "Stop the car!" );

                                }
                    section
                        <p>if { ... } else { ... }</p>
                        pre
                            code.hljs(data-trim contenteditable).
                                    let trafficLight = 'red';

                                    if ( trafficLight === 'red' ){

                                        console.log( "Stop the car!" );

                                    } else {

                                        console.log( "Move on." );

                                    }
                    section
                        <p>NESTED if { ... } else { ... }</p>
                        pre
                            code.hljs(data-trim contenteditable).
                                let trafficLight = 'red';

                                if ( trafficLight === 'red' ){
                                    console.log( "Stop the car!" );
                                } else {
                                    if ( trafficLight === "orange" ){
                                        console.log( "Slow down!" );
                                    } else {
                                        if ( trafficLight === "green" ){
                                        console.log( "Move on." );
                                        }
                                    }
                                }
                        <p><small class="colorful">This can be written like this...</small></p>
                    section
                        <p>if { ... } else if { ... }</p>
                        pre
                            code.hljs(data-trim contenteditable).
                                if ( trafficLight === 'red' ){

                                    console.log( "Stop the car!" );

                                } else if ( trafficLight === "orange" ){

                                    console.log( "Slow down!" );

                                } else if ( trafficLight === "green" ){

                                    console.log( "Move on." );

                                }

                // Conditionals | Switch
                section
                    section
                        <h2>The <strong class="colorful">switch</strong> statement</h2>
                        <p>No more <strong class="colorful">else ... if's</strong>!</p>
                    section
                        pre
                            code.hljs(data-trim contenteditable).
                                let trafficLight = "orange";
                                switch (trafficLight){
                                    case "red":
                                        console.log("Stop!");
                                        break;
                                    case "orange":
                                        console.log("Slow down");
                                        break;
                                    case "green":
                                        console.log("Move on");
                                        break;
                                    default:
                                        console.log("Default catch...");
                                }
                        <p><small><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch">More on the <strong class="colorful">Switch</strong> Statement</a></small></p>

                // LOOPS
                section
                    section
                        h3 Loops
                    // Loops | While
                    section
                        <h2>The <strong class="colorful">while ... loop</strong></h2>
                    section
                        pre
                            code.hljs(data-trim contenteditable).
                                while ( EXPRESSION ){

                                    RUN CODE...

                                }
                        <p><small>While some <strong class="colorful">EXPRESSION</strong> evaluates to <strong>TRUE</strong> run the { code }</small></p>
                    section
                        <h5>Example:</h5>
                        pre
                            code.hljs(data-trim contenteditable).
                                let counter = 0;

                                while ( counter < 3 ){

                                    console.log( “Counter value is: “ + counter );
                                    counter = counter + 1;

                                }
                        <p>
                            <small><strong>Output:</strong><br /><br /></small>
                        </p>
                        pre.fragment
                            code.html(data-trim contenteditable).
                                Counter value is: 0
                        pre.fragment
                            code.html(data-trim contenteditable).
                                Counter value is: 1
                        pre.fragment
                            code.html(data-trim contenteditable).
                                Counter value is: 2
                    section
                        h3 Quick Practice:
                        a(href="https://www.w3schools.com/js/tryit.asp?filename=tryjs_while" target="_blank") https://bit.ly/2riL4RE

                    // Loops | for ... loop
                    section
                        <h2>The <strong class="colorful">for ... loop</strong></h2>
                        <h5>A while statement with... a twist!</h5>
                    section
                        pre
                            code.hljs(data-trim contenteditable).
                                let counter = 0; 
                                while ( counter < 3 ){

                                    console.log( counter );
                                    counter = counter + 1;

                                }
                        .linebreak
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                for ( let counter = 0; counter < 3; counter = counter + 1 ){

                                    console.log( counter );

                                }
                        <p class="fragment"><small>So, the loop structure is this:</small></p>
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                for ( START STATEMENT; CONDITION; END STATEMENT ){

                                    CODE

                                }
                    section
                        <h5>Example:</h5>
                        pre
                            code.javascript(data-trim contenteditable).
                                let someArray = [ "a", "b", "c" ];

                                for ( let counter = 0; counter < someArray.length; counter++ ){

                                console.log( "Counter value is: " + someArray[counter] );

                                }
                        <p>
                            <small><strong>Output:</strong><br /><br /></small>
                        </p>
                        pre.fragment
                            code.html(data-trim).
                                Counter value is: a
                        pre.fragment
                            code.html(data-trim).
                                Counter value is: b
                        pre.fragment
                            code.html(data-trim).
                                Counter value is: c
                    section
                        h3 Quick Practice:
                        a(href="https://www.w3schools.com/js/tryit.asp?filename=tryjs_loop_for" target="_blank") https://bit.ly/2sFunCg

                    // Loops | Quick Mention: do ... while
                    section
                        h3 Quick Mention:
                        h4 The <strong class="colorful">do ... while</strong> loop
                        a(href="https://www.w3schools.com/js/js_loop_while.asp" target="_blank") W3Schools.com

                // FUNCTIONS
                section
                    section(data-background="#9cbf3f")
                        h3 Functions
                    section.clean_img(style='padding:0; margin-top: -80px;' data-background="#9cbf3f")
                        <img src="images/understanding_functions_01.jpg" alt="">
                    section.clean_img(style='padding:0; margin-top: -80px;' data-background="#9cbf3f")
                        <img src="images/understanding_functions_02.jpg" alt="">
                    section.clean_img(style='padding:0; margin-top: -80px;' data-background="#9cbf3f")
                        <img src="images/understanding_functions_03.jpg" alt="">
                    section.clean_img(style='padding:0; margin-top: -80px;' data-background="#9cbf3f")
                        <img src="images/understanding_functions_04.jpg" alt="">
                    section.clean_img(style='padding:0; margin-top: -80px;' data-background="#9cbf3f")
                        <img src="images/understanding_functions_05.jpg" alt="">
                    section.clean_img(style='padding:0; margin-top: -80px;' data-background="#9cbf3f")
                        <img src="images/understanding_functions_06.jpg" alt="">

                // FUNCTIONS | Declaring & Calling
                section
                    section
                        <p><small>Declaring a Function:</small></p>
                        pre
                            code.hljs(data-trim contenteditable).
                                function repeatCode( param, otherParam ){

                                    console.log( param );
                                    console.log( otherParam );

                                }
                        <p class="fragment"><small>Calling the Function:</small></p>
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                repeatCode( "value for param", "value for otherParam" );

                        <p class="fragment"><small>Will output:</small></p>
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                "value for param"
                                "value for otherParam"

                    section
                        <p><small>Declaring a Function (#2):</small></p>
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                function repeatCode( param, otherParam ){

                                    console.log( param );
                                    console.log( otherParam );

                                }
                        <p class="fragment"><small>Can be declared as:</small></p>
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let repeatCode = function( param, otherParam ){

                                    console.log( param );
                                    console.log( otherParam );

                                }
                    section
                        <p><small>The return statement:</small></p>
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                function repeatCode( one, two ){

                                    return one + two;

                                }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                repeatCode( 4, 6 );
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( repeatCode( 4, 6 ) );
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let sum = repeatCode( 4, 6 );
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( sum );
                        p.small.fragment ( What if there is no return statement present? )
                    section
                        h3 Let's practice, shall we?
                        a(href="https://codepen.io/kostasx/pen/vQMwKp?editors=0011" target="_blank") https://bit.ly/2RxaJl9

                // OBJECTS
                section
                    section
                        <h3 class="colorful">Objects</h3>
                        <h5 class="fragment">{ Advanced Data Structures }</h5>
                    section
                        <h5>Remember Arrays?</h5>
                        pre
                            code.hljs(data-trim contenteditable).
                                let arr = [ "Kosmas", "Kostas", "Chris" ]; 
                                console.log( arr[0] );
                        <p><small>Under the hood, this works much like this:</small></p>
                        pre
                            code.hljs(data-trim contenteditable).
                                [ 0: "Kosmas", 1: "Kostas", 2: "Chris" ]
                    section
                        <p>Declaring an Object:</p>
                        pre
                            code.hljs(data-trim contenteditable).
                                let obj = { 

                                    teacher: "Kosmas",
                                    assistant: "Kostas",
                                    founder: "Chris" 

                                }
                        <p><small>In Objects, instead of using a numeric index for each element,<br />we explicitly define a key (String).</small></p>
                    section
                        <p>Accessing an Object Property:</p>
                        pre
                            code.hljs(data-trim contenteditable).
                                let obj = { teacher: "Kosmas", assistant: "Kostas", founder: "Chris" }

                                console.log( obj["teacher"] );
                                console.log( obj.assistant );
                        <p class="fragment"><small>Will Output:</small></p>
                        pre.fragment
                            code.hljs.
                                "Kosmas"
                                "Kostas"
                    section
                        <p>Setting an Object Property:</p>
                        pre
                            code.hljs(data-trim contenteditable).
                                let obj = { teacher: "Kosmas", assistant: "Kostas", founder: "Chris" }

                                obj.teacher = "Mary";

                                console.log( obj );
                                console.log( obj["teacher"] );
                        <p class="fragment"><small>Will Output:</small></p>
                        pre.fragment
                            code.hljs.javascript.
                                { teacher: "Mary", assistant: "Kostas", founder: "Chris" }
                                "Mary"
                    section
                        <p><small>When an Object Property contains a Function, it is called a <strong class="colorful">method</strong></small></p>
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let car = {
                                    color: "red",
                                    year: 2010,
                                    type: "sports",
                                    showInfo: function(){
                                        console.log("A red sports car.");
                                    }
                                }
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                car.showInfo();
                        <p class="fragment"><small>Will output:</small></p>
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                "A red sports car."
                    section
                        <p><small>You can access any Object property using the <strong class="colorful">this</strong> keyword, while inside the Object.</small></p>
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let car = {
                                    color: "red",
                                    year: 2010,
                                    type: "sports",
                                    showInfo: function(){
                                        console.log("A " + this.color + " sports car.");
                                    }
                                }
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                car.showInfo();
                        <p class="fragment"><small>Will output:</small></p>
                        pre.fragment
                            code.hljs(data-trim).
                                "A red sports car."
                    section
                        <h4>Recap</h4>
                    section
                        <p><small>An <strong class="colorful">Object</strong> is a collection of variables (called <strong class="colorful">properties</strong>)<br />
                                and functions (called <strong class="colorful">methods</strong>) which can be accessed<br />using the . dot
                                notation: <strong class="colorful">Object.property, Object.method()</strong></small></p>
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let client = {
                                    age: 50,
                                    name: "Jane",
                                    surname: "Doe",
                                    getName: function(){

                                        console.log( this.name + " " + this.surname );

                                    } 
                                }

                                client.getName();
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                "Jane Doe"
                    section
                        h3 Quick Practice?
                        a(href="https://codepen.io/kostasx/pen/YJJBrR?editors=0010" target="_blank") https://bit.ly/2FWYb5d

                // RESOURCES
                section
                    <h3>Resources</h3>
                    .columns
                        .column.is-8.is-offset-2
                            <ul style="font-size: 28px;">
                                <li>
                                    <a href="https://jgthms.com/javascript-in-14-minutes/">JavaScript in 14 minutes</a>
                                </li>
                                <li>
                                    <a href="https://www.javascript.com/">READY TO TRY JavaScript?</a>
                                </li>
                                <li>
                                    <a href="http://jsforcats.com/">JavaScript for Cats: An introduction for new programmers</a>
                                </li>
                                <li>
                                    <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch1.md">You Don't Know JS - Up &amp; Going | Into Programming</a>
                                </li>
                                <li>
                                    <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch2.md">You Don't Know JS - Up &amp; Going | Into JavaScript</a>
                                </li>
                                <li>
                                    <a href="https://scrimba.com/g/gintrotojavascript">Scrimba: Introduction to JavaScript</a>
                                </li>
                                <li>
                                    <a href="https://javascript.info/first-steps">JavaScript.info: JavaScript Fundamentals</a>
                                </li>
                                <li>
                                    <a href="https://www.w3schools.com/js/default.asp">W3Schools: JavaScript</a>
                                </li>
                                <li>
                                    <a href="https://www.codecademy.com/learn/introduction-to-javascript">Introduction to JavaScript: Learn
                                        JavaScript fundamentals and build interactive websites and pages.</a>
                                </li>
                            </ul>

                // EXERCISES 
                section
                    <h3>Exercises & Practice Material:</h3>
                    .columns
                        .column.is-8.is-offset-2
                            ul
                                li
                                    <a href="https://www.w3schools.com/js/js_examples.asp">W3Schools: JavaScript by Example</a>
                                li
                                    <a href="https://www.w3schools.com/js/exercise_js.asp?filename=exercise_js_variables1">W3Schools: JavaScript Exercises</a>

                // TTS | OUTRO 
                section#tts-outro.tts-title(data-state='outro')

        //- SCRIPTS
        script(src='../libs/reveal.js/lib/js/head.min.js')
        script(src='../libs/reveal.js/js/reveal.js')
        script.
            /* SHA */
            Reveal.configure({
                keyboard: {
                // Key: 'e'
                    69: function () {
                    /*
                    IF NOT EXIST
                    <PRE>.insertAdjacentHTML('afterend', code);
                    EVALUATE
                    eval( <PRE>.textContent )
                    */
                    }
                }
            });
            // More info https://github.com/hakimel/reveal.js#configuration
            Reveal.initialize({
                maxScale: 1,
                minScale: 1,
                history: true,
                // More info https://github.com/hakimel/reveal.js#dependencies
                dependencies: [
                { src: '../libs/reveal.js/lib/js/classList.js', condition: function () { return !document.body.classList; } },
                { src: '../libs/reveal.js/plugin/markdown/marked.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },
                { src: '../libs/reveal.js/plugin/markdown/markdown.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },
                { src: '../libs/reveal.js/plugin/highlight/highlight.js', async: true, callback: function () { hljs.initHighlightingOnLoad(); } },
                { src: '../libs/reveal.js/plugin/search/search.js', async: true },
                { src: '../libs/reveal.js/plugin/zoom-js/zoom.js', async: true },
                { src: '../libs/reveal.js/plugin/notes/notes.js', async: true }
                ]
            });

            //- Reveal.addEventListener('data-state-value-here', function (){});

            Reveal.addEventListener( 'ready', function( e ) {

                let slideState = e.currentSlide.getAttribute('data-state');
                switch ( slideState ) {
                    case 'tts-intro':
                        console.log('tts-intro');
                        document.querySelector(".reveal").classList.add("tts-intro")
                        break;
                    case 'intro':
                        console.log('intro');
                        document.querySelector(".reveal").classList.remove("tts-intro")
                        break;
                    case 'outro':
                        console.log('outro');
                        document.querySelector(".reveal").classList.add("tts-outro")
                        break;
                    default:
                        console.log("default");
                        document.querySelector(".reveal").classList.remove("tts-outro")
                        document.querySelector(".reveal").classList.remove("tts-intro")

                }    

            });

            /* TTS */

            Reveal.addEventListener( 'slidechanged', function( e ) {

                let slideState = e.currentSlide.getAttribute('data-state');
                switch ( slideState ) {
                    case 'tts-intro':
                        console.log('tts-intro');
                        document.querySelector(".reveal").classList.add("tts-intro")
                        break;
                    case 'intro':
                        console.log('intro');
                        document.querySelector(".reveal").classList.remove("tts-intro")
                        break;
                    case 'outro':
                        console.log('outro');
                        document.querySelector(".reveal").classList.add("tts-outro")
                        break;
                    default:
                        console.log("default");
                        document.querySelector(".reveal").classList.remove("tts-outro")
                        document.querySelector(".reveal").classList.remove("tts-intro")

                }    
                // event.indexh
                
            });